#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    May 07, 2018 10:48:37 PM
import os
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

sys.path.append('..')
import gedcom_parser_support
from gedcom_xml_parser.gedcom_xml_parser import GedcomXMLParser

THIS_FOLDER_G = ""
if getattr(sys, "frozen", False):
    # frozen
    THIS_FOLDER_G = os.path.dirname(sys.executable)
else:
    # unfrozen
    THIS_FOLDER_G = os.path.dirname(os.path.realpath(__file__))

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    try:
        icon_img = Image(
            "photo",
            file=THIS_FOLDER_G + "/assets/icon.png"
        )
        root.call(
            "wm",
            "iconphoto",
            root._w,
            icon_img
        )
    except Exception as e:
        pass
    gedcom_parser_support.set_Tk_var()
    top = GEDCOM_PARSER(root)
    gedcom_parser_support.init(root, top)
    root.mainloop()

w = None
def create_GEDCOM_PARSER(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gedcom_parser_support.set_Tk_var()
    top = GEDCOM_PARSER (w)
    gedcom_parser_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_GEDCOM_PARSER():
    global w
    w.destroy()
    w = None


class GEDCOM_PARSER:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#efefef'  # X11 color: 'gray85'
        _fgcolor = '#333333'  # X11 color: 'black'
        _compcolor = '#efefef' # X11 color: 'gray85'
        _ana1color = '#efefef' # X11 color: 'gray85' 
        _ana2color = '#efefef' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("960x640+204+33")
        top.title("GEDCOM TO XML")
        top.configure(background="#efefef")

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.0, rely=0.06, relheight=0.94, relwidth=0.5)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#efefef")
        self.Frame1.configure(width=475)

        self.GedcomTextBox = ScrolledText(self.Frame1)
        self.GedcomTextBox.place(relx=0.0, rely=0.07, relheight=0.925
                , relwidth=1)
        self.GedcomTextBox.configure(background="white")
        self.GedcomTextBox.configure(font="TkTextFont")
        self.GedcomTextBox.configure(foreground="black")
        self.GedcomTextBox.configure(highlightbackground="#efefef")
        self.GedcomTextBox.configure(highlightcolor="black")
        self.GedcomTextBox.configure(insertbackground="black")
        self.GedcomTextBox.configure(insertborderwidth="3")
        self.GedcomTextBox.configure(selectbackground="#c4c4c4")
        self.GedcomTextBox.configure(selectforeground="black")
        self.GedcomTextBox.configure(width=10)
        self.GedcomTextBox.configure(wrap=NONE)

        self.Label1 = Label(self.Frame1)
        self.Label1.place(relx=0.02, rely=0.02, height=21, width=400)
        self.Label1.configure(anchor=W)
        self.Label1.configure(background="#efefef")
        self.Label1.configure(disabledforeground="#efefef")
        self.Label1.configure(foreground="#333333")
        self.Label1.configure(text='''Paste GEDCOM Text Here''')
        self.Label1.configure(width=444)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.5, rely=0.06, relheight=0.94, relwidth=0.5)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#efefef")
        self.Frame2.configure(width=125)

        self.XMLTextBox = ScrolledText(self.Frame2)
        self.XMLTextBox.place(relx=0.0, rely=0.07, relheight=0.925
                , relwidth=1)
        self.XMLTextBox.configure(background="white")
        self.XMLTextBox.configure(font="TkTextFont")
        self.XMLTextBox.configure(foreground="black")
        self.XMLTextBox.configure(highlightbackground="#efefef")
        self.XMLTextBox.configure(highlightcolor="black")
        self.XMLTextBox.configure(insertbackground="black")
        self.XMLTextBox.configure(insertborderwidth="3")
        self.XMLTextBox.configure(selectbackground="#c4c4c4")
        self.XMLTextBox.configure(selectforeground="black")
        self.XMLTextBox.configure(width=10)
        self.XMLTextBox.configure(wrap=NONE)

        self.Label2 = Label(self.Frame2)
        self.Label2.place(relx=0.02, rely=0.02, height=21, width=400)
        self.Label2.configure(anchor=W)
        self.Label2.configure(background="#efefef")
        self.Label2.configure(disabledforeground="#efefef")
        self.Label2.configure(foreground="#333333")
        self.Label2.configure(text='''XML Text Will Appear Here''')

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.0, rely=0.0, relheight=0.06, relwidth=1.0)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(background="#efefef")
        self.Frame3.configure(width=955)

        self.Label3 = Label(self.Frame3)
        self.Label3.place(relx=0.01, rely=0.2, height=21, width=450)
        self.Label3.configure(anchor=W)
        self.Label3.configure(background="#efefef")
        self.Label3.configure(disabledforeground="#efefef")
        self.Label3.configure(foreground="#333333")
        self.Label3.configure(text='''GEDCOM TO XML PARSER''', font=("OCR A Extended", 13))

        self.ParseButton = Button(self.Frame3, command=self.parse_text)
        self.ParseButton.place(relx=1, rely=0.15, x=-18, height=25, width=75, anchor=NE)
        self.ParseButton.configure(activebackground="#efefef")
        self.ParseButton.configure(activeforeground="#333333")
        self.ParseButton.configure(background="#efefef")
        self.ParseButton.configure(disabledforeground="#a3a3a3")
        self.ParseButton.configure(foreground="#333333")
        self.ParseButton.configure(highlightbackground="#efefef")
        self.ParseButton.configure(highlightcolor="black")
        self.ParseButton.configure(pady="0")
        self.ParseButton.configure(text='''PARSE''')
        self.ParseButton.configure(relief=RAISED)
        self.ParseButton.configure(width=75)

        self.MinifyXMLCheckboxState = IntVar()
        self.MinifyXMLCheckbox = Checkbutton(self.Frame3)
        self.MinifyXMLCheckbox.place(relx=1, rely=0.2, x=-110, height=22, width=100, anchor=NE)

        self.MinifyXMLCheckbox.configure(activebackground="#efefef")
        self.MinifyXMLCheckbox.configure(activeforeground="#333333")
        self.MinifyXMLCheckbox.configure(background="#efefef")
        self.MinifyXMLCheckbox.configure(disabledforeground="#a3a3a3")
        self.MinifyXMLCheckbox.configure(foreground="#333333")
        self.MinifyXMLCheckbox.configure(highlightbackground="#efefef")
        self.MinifyXMLCheckbox.configure(highlightcolor="black")
        self.MinifyXMLCheckbox.configure(justify=LEFT)
        self.MinifyXMLCheckbox.configure(text='''Minified XML''')
        self.MinifyXMLCheckbox.configure(variable=self.MinifyXMLCheckboxState)
        self.MinifyXMLCheckbox.configure(width=100)

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

    def parse_text(self):
        unparsed_text = self.GedcomTextBox.get(1.0, END)

        try:
            parser = GedcomXMLParser(unparsed_text)
            parse_text = parser.get_parsed_data()

            if self.MinifyXMLCheckboxState.get() == 1:
                parse_text = parser.get_parsed_data_minified()
                self.XMLTextBox.configure(wrap=WORD)
            else:
                self.XMLTextBox.configure(wrap=NONE)
            
            self.XMLTextBox.delete('1.0', END)
            self.XMLTextBox.insert(INSERT, parse_text)
        except:
            self.XMLTextBox.delete('1.0', END)
            self.XMLTextBox.insert(INSERT, """Invalid GEDCOM Text""")
            


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped


class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()
